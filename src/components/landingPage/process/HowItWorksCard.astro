---
// ProcessStep.astro
interface Props {
  number: number;
  title: string;
  highlightedTitle?: {
    before?: string;
    highlight: string;
    after?: string;
  };
  features: string[];
  screenshot?: string;
}

const { number, title, highlightedTitle, features, screenshot } = Astro.props;
---

<div
  class="rounded-2xl bg-white p-6 md:p-2 md:pr-8 shadow-sm border border-blue-100"
>
  <div class="flex flex-col md:flex-row gap-8 items-center">
    <div
      class="w-full md:w-2/3 flex justify-center rounded-lg p-4 bg-center bg-cover bg-no-repeat bg-gradient-to-br from-primary/50 image-zoom-container overflow-hidden to-chart-2/50"
    >
      <div
        class="relative w-full max-w-[300px] aspect-[2/3] zoom-image shadow-lg overflow-hidden rounded-xl border-2 border-black/10"
      >
        <img
          src={screenshot ??
            `https://placehold.co/400x600?text=SpeechCatcher+App+Step+${number}`}
          alt={`SpeechCatcher iPad App - ${title}`}
          class="absolute inset-0 w-full h-full object-cover"
        />
      </div>
    </div>

    <div class="w-full md:w-1/3">
      <div class="flex flex-col items-start space-y-6">
        <div class="flex items-center space-x-4">
          <div
            class="flex h-12 w-12 items-center justify-center rounded-full bg-primary/10"
          >
            <span class="text-xl font-bold text-primary">{number}</span>
          </div>
          <h3 class="text-2xl font-bold">
            {
              highlightedTitle ? (
                <>
                  {highlightedTitle.before && (
                    <span>{highlightedTitle.before}</span>
                  )}
                  <span class="text-primary">{highlightedTitle.highlight}</span>
                  {highlightedTitle.after && (
                    <span>{highlightedTitle.after}</span>
                  )}
                </>
              ) : (
                title
              )
            }
          </h3>
        </div>

        <ul class="space-y-3 pl-3 text-muted-foreground">
          {
            features.map((feature) => (
              <li class="flex items-start">
                <svg
                  class="mr-3 h-5 w-5 mt-0.5 text-primary"
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="#2cb1bc"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <polyline points="20 6 9 17 4 12" />
                </svg>
                <span class="text-base">{feature}</span>
              </li>
            ))
          }
        </ul>

        <div class="pt-2">
          <a
            href="#"
            class="text-primary font-medium flex items-center hover:underline"
          >
            Learn more
            <svg
              class="ml-1 h-4 w-4"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M5 12h14"></path>
              <path d="m12 5 7 7-7 7"></path>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .image-zoom-container {
    position: relative;
    overflow: hidden;
  }

  .zoom-image {
    transform-origin: center;
    transition: transform 0.1s ease-out;
  }
</style>

<script>
  // Find all image containers
  const containers = document.querySelectorAll(".image-zoom-container");

  containers.forEach((container) => {
    const image: HTMLElement | null = container.querySelector(".zoom-image");

    if (!image) return;

    // Values to control zoom level and movement sensitivity
    const zoomLevel = 1.5;
    const movementFactor = 0.3; // Base movement factor
    const verticalBoost = 1.5; // Boost vertical movement for better top/bottom reach

    container.addEventListener("mouseenter", () => {
      image.style.transitionDuration = "0.3s";
      image.style.transform = `scale(${zoomLevel})`;
    });

    container.addEventListener("mousemove", (e) => {
      // Get the position of the cursor relative to the container
      const rect = container.getBoundingClientRect();
      const x = (e as MouseEvent).clientX - rect.left;
      const y = (e as MouseEvent).clientY - rect.top;

      // Calculate the percentage position
      const xPercent = (x / rect.width) * 100;
      const yPercent = (y / rect.height) * 100;

      // Calculate the translation amount - inverted direction
      // When mouse moves right (higher xPercent), image moves left (negative moveX)
      const moveX = (50 - xPercent) * movementFactor;
      const moveY = (50 - yPercent) * (movementFactor * verticalBoost); // Boosted vertical movement

      // Apply the transform with the inverted movement
      image.style.transitionDuration = "0.1s";
      image.style.transform = `scale(${zoomLevel}) translate(${moveX}%, ${moveY}%)`;
    });

    container.addEventListener("mouseleave", () => {
      image.style.transitionDuration = "0.2s";
      image.style.transform = "scale(1) translate(0%, 0%)";
    });
  });
</script>
