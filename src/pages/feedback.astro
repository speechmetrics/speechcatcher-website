---
import "../styles/global.css";
import { feedbackItems } from "../data/feedback";
import { Card, CardContent } from "../components/ui/card";
import { Input } from "../components/ui/input";
import FeedbackItem from "../components/feedbackPage/FeedbackItem.astro";
import { ScrollArea } from "../components/ui/scroll-area";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";

const title = "Feedback - SpeechCatcher";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <meta name="description" content="SpeechCatcher - Feedback Portal" />
    <title>{title}</title>
  </head>
  <body
    class="min-h-screen bg-[#F0F4F8] font-sans antialiased flex items-center flex-col justify-between"
  >
    <div class="container px-4 md:px-6 mx-auto max-w-6xl py-8">
      <Card className="overflow-hidden p-0 border-2 border-[#D9E2EC] shadow-lg">
        <CardContent className="p-0">
          <div class="flex flex-col md:flex-row">
            <!-- Sidebar -->
            <div
              class="w-full md:w-64 border-b md:border-b-0 md:border-r border-[#D9E2EC] bg-white p-6 flex flex-col"
            >
              <!-- Login section -->
              <div class="border border-[#D9E2EC] rounded p-6 text-center mb-8">
                <p class="text-[#486581] text-sm mb-6">
                  Log in to your SpeechCatcher account to give feedback
                </p>
                <button
                  class="w-full py-3 bg-[#2680C2] text-white font-medium rounded text-sm"
                >
                  LOG IN
                </button>
              </div>

              <!-- Boards -->
              <div>
                <h3
                  class="text-xs font-semibold text-[#829AB1] uppercase tracking-wider mb-2"
                >
                  BOARDS
                </h3>
                <ul>
                  <li class="mb-2">
                    <a
                      href="#"
                      class="block p-3 rounded bg-[#F0F4F8] text-[#102A43] hover:bg-[#D9E2EC] transition"
                    >
                      Feature requests
                    </a>
                  </li>
                  <li>
                    <a
                      href="#"
                      class="block p-3 rounded text-[#486581] hover:bg-[#F0F4F8] transition"
                    >
                      Bugs
                    </a>
                  </li>
                </ul>
              </div>
            </div>

            <!-- Main content -->
            <div class="flex-1 bg-white flex flex-col">
              <!-- Header controls -->
              <div
                class="border-b border-[#D9E2EC] p-4 flex flex-col md:flex-row justify-between items-center gap-4"
              >
                <div class="flex items-center">
                  <span class="text-sm text-[#486581]">Showing</span>
                  <button
                    class="flex items-center ml-2 text-sm text-[#102A43] font-medium"
                  >
                    Top
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-4 w-4 ml-1"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </button>
                  <span class="text-sm text-[#486581] ml-2">posts</span>
                </div>
                <div class="relative w-full md:w-auto">
                  <div class="relative flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-4 w-4 text-[#829AB1] absolute left-3"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                    <Input
                      id="search-input"
                      type="text"
                      placeholder="Search feedback..."
                      className="pl-9 w-full md:w-64 text-sm"
                    />
                  </div>
                </div>
              </div>

              <!-- Feedback items with ScrollArea -->
              <ScrollArea className="flex-1 max-h-[70vh]" client:load>
                <div id="feedback-list" class="py-1">
                  {feedbackItems.map((item) => <FeedbackItem item={item} />)}
                  <div
                    id="no-results"
                    class="hidden p-6 text-center text-[#486581]"
                  >
                    No matching feedback items found.
                  </div>
                </div>
              </ScrollArea>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>

    <script>
      // Client-side search filtering functionality
      document.addEventListener("DOMContentLoaded", () => {
        const searchInput = document.getElementById(
          "search-input"
        ) as HTMLInputElement;
        const feedbackItems = document.querySelectorAll(".feedback-item");
        const noResults = document.getElementById("no-results");

        searchInput?.addEventListener("input", () => {
          const searchTerm = searchInput.value.toLowerCase().trim();
          let hasVisibleItems = false;

          feedbackItems.forEach((item) => {
            const title = (item as HTMLElement).dataset.title || "";
            const description = (item as HTMLElement).dataset.description || "";

            if (
              title.includes(searchTerm) ||
              description.includes(searchTerm) ||
              searchTerm === ""
            ) {
              item.classList.remove("hidden");
              hasVisibleItems = true;
            } else {
              item.classList.add("hidden");
            }
          });

          if (noResults) {
            if (hasVisibleItems) {
              noResults.classList.add("hidden");
            } else {
              noResults.classList.remove("hidden");
            }
          }
        });
      });
    </script>
  </body>
</html>
